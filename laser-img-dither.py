#!/usr/bin/env python3

import time
perf_start = time.perf_counter()

import argparse
import numpy as np
import cv2
from matplotlib import pyplot as plt
from matplotlib.pyplot import figure
import imagedither
import json

error = ""

try:
	parser = argparse.ArgumentParser(description='Scale and dither an image for laser etching')
	parser.add_argument('--infile', type=str, default='demo.png', help='input image file path')
	parser.add_argument('--outfile', type=str, default='', help='output image file path (default is autogenerated)')
	parser.add_argument('--nodither', action='store_true', help='do not perform dithering')
	parser.add_argument('--noinvert', action='store_true', help='do not invert the image shading')
	parser.add_argument('--contrast', type=float, default=1.0, help='contrast, any positive natural number')
	parser.add_argument('--brightness', type=int, default=0, help='brightness, -255 to 255')
	parser.add_argument('--gamma', type=float, default=1.0, help='gamma, any positive natural number except 0')
	parser.add_argument('--resolution', type=int, default=10, help='resolution to use, pixels-per-millimeter')
	parser.add_argument('--width', type=int, default=0, help='output image width in millimeters')
	parser.add_argument('--height', type=int, default=0, help='output image height in millimeters')
	parser.add_argument('--box', action='store_true', help='draw a black box around the final image')
	parser.add_argument('--imshow', action='store_true', help='show results during processing (debug only)')
	parser.add_argument('--imshowf', action='store_true', help='show final result (debug only)')
	parser.add_argument('--histogram', action='store_true', help='show histogram (debug only)')
	parser.add_argument('--json', action='store_true', help='write json to file')
	parser.add_argument('--silent', action='store_true', help='stdout only shows json')

	args = parser.parse_args()
except Exception as ex:
	error += str(ex) + "\r\n"

def main():
	global error

	infile = args.infile
	outfile = args.outfile
	if len(outfile) <= 0:
		outfile = infile + ".out.png"

	try:
		if args.silent == False:
			print("opening file %s" % infile)
		img = cv2.imread(infile, cv2.IMREAD_GRAYSCALE)
		if img is None:
			raise FileNotFoundError("File not found \"%s\"" % infile)
		inheight, inwidth = img.shape
		if args.silent == False:
			print("image size w %u x h %u" % (inwidth, inheight))
			print("brite %u contrast %f gamma %f" % (args.brightness, args.contrast, args.gamma))

		# TODO: preshrink for faster preview?

		if args.gamma <= 0.0:
			raise ValueError("Gamma too low \"%f\"" % args.gamma)

		if args.gamma != 1.0:
			invGamma = 1.0 / args.gamma
			gammaTable = np.array([((i / 255.0) ** invGamma) * 255
				for i in np.arange(0, 256)]).astype("uint8")
			gimg = cv2.LUT(img.copy(), gammaTable)
		else:
			gimg = img.copy()

		if args.imshow:
			cv2.imshow("gamma", gimg)
			cv2.waitKey(0)
			cv2.destroyAllWindows()

		if args.contrast != 1.0 or args.brightness != 0:
			bcimg = np.zeros(img.shape, img.dtype)
			for y in range(img.shape[0]):
				for x in range(img.shape[1]):
					bcimg[y, x] = args.contrast * gimg[y, x] + args.brightness
			bcimg = np.clip(bcimg, 0, 255)
		else:
			bcimg = gimg.copy()

		if args.imshow:
			cv2.imshow("brite + contra", gimg)
			cv2.waitKey(0)
			cv2.destroyAllWindows()

		plt.figure(figsize=(2, 2))
		hist_arr_before = img.ravel()
		hist_arr_after  = bcimg.ravel()
		if args.gamma != 1.0 or args.contrast != 1.0 or args.brightness != 0:
			plt.hist(hist_arr_before, 256, [0, 256], alpha=0.4, label = 'before')
			plt.hist(hist_arr_after,  256, [0, 256], alpha=0.4, label = 'after')
			plt.legend(loc='best')
		else:
			plt.hist(hist_arr_before, 256, [0, 256], alpha=0.4)
		plt.xticks([])
		plt.yticks([])
		pltgca = plt.gca()
		pltgca.axes.xaxis.set_ticklabels([])
		pltgca.axes.yaxis.set_ticklabels([])
		hist_file = infile + ".hist.png"
		plt.savefig(hist_file)
		if args.histogram:
			plt.show()

		fwidth = inwidth
		fheight = inheight

		if args.width > 0 and args.height > 0:
			fwidth = args.width * args.resolution
			fheight = args.height * args.resolution
		elif args.width > 0:
			fwidth = args.width * args.resolution
			fheight = (inheight / inwidth) * fwidth
		elif args.height > 0:
			fheight = args.height * args.resolution
			fwidth = (inwidth / inheight) * fheight

		fwidth  = int(round(fwidth))
		fheight = int(round(fheight))

		if args.silent == False:
			print("final width px %u x height px %u" % (fwidth, fheight))

		if args.noinvert:
			invImg = bcimg
		else:
			invImg = (255 - bcimg.copy())

		scaledImg = cv2.resize(invImg, (fwidth, fheight))

		if args.imshow:
			cv2.imshow("inv + scale", scaledImg)
			cv2.waitKey(0)
			cv2.destroyAllWindows()

		if args.nodither:
			ditherImg = scaledImg
		else:
			ditherImg = imagedither.dithering_gray(scaledImg.copy())

		if args.box:
			cv2.rectangle(ditherImg, (0, 0), (fwidth - 1, fheight - 1), 0, 1)

		# TODO: generate realistic preview?

		if args.silent == False:
			print("writing output file %s" % outfile)
		cv2.imwrite(outfile, ditherImg)
	except Exception as ex:
		error += str(ex) + "\r\n"

	perf_end = time.perf_counter()
	perf_time = perf_end - perf_start
	if args.silent == False:
		print("time elapsed %f" % perf_time)

	jsonfile = outfile + ".json"
	if len(error) <= 0:
		jdata = { 'iw': '%u' % inwidth, 'ih': '%u' % inheight, 'ow': '%u' % fwidth, 'oh': '%u' % fheight, 'infile': infile, 'outfile': outfile, 'histfile': hist_file, 'time': '%f' % perf_time, 'avg': '%f' % np.average(invImg), 'error': '' }
		if args.json:
			jdata['jsonfile'] = jsonfile
	else:
		jdata = { 'error': error }
	jstr = json.dumps(jdata, indent=4)
	if args.silent == False:
		print("json:")
	print(jstr)
	if args.json:
		with open(jsonfile, 'w') as out_file:
			out_file.write(jstr)

	if args.imshow or args.imshowf:
		cv2.imshow("final", ditherImg)
		cv2.waitKey(0)
		cv2.destroyAllWindows()

if __name__ == "__main__":
	main()